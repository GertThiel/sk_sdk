= SalesKing API Client

ActiveResource based SalesKing API client. 
This does NOT rely on parsing the JSON Schema, since ActiveResource creates the
Getter/Setter methods(less restrict). The client also adds some patches to AR to
fix json parsing issues.

== Install

    gem install sk_sdk

If you are using bundler add to Gemfile

  gem "sk_sdk"
  # or directly require a used class
  gem "sk_sdk", :require => "sk_sdk/base"

Dependencies (gem's):

* activeresupport
* activeresource

== Authorization

This client should be used with an oAuth2 access_token, or as long as we support
it can use HTTBasic Auth with username and password. For a quick start BasicAuth
is definitly easier, but it is less secure since you cannot track which client
is accessing your account and the client has the full rights of the user. So if
someone gets your credentials he can log into your SalesKing account and do
whatever you can!

Getting an access_token or checking is validity is not the scope of this
library, it merely sets the AUTHORIZATION header field to
  AUTHORIZATION: Bearer YourAccessToken
See our {oAuth helper class}[https://github.com/salesking/sk_sdk/blob/master/lib/sk_sdk/oauth.rb]
and read our {oAuth docs}[http://dev.blog.salesking.eu/docs/authentication/].

== Usage

SalesKing's api interface is RESTful(mostly) and returns & accepts JSON data.
All resources such as clients, invoices, products can be accessed via URL's
through standard HTTP methods GET, POST, PUT and DELETE.
see available objects and endpoints here:
https://github.com/salesking/sk_api_schema/tree/master/json

First create the classes, which simply need to descend from SK::SDK::Base
There are several ways to do so:

  require 'sk_sdk/base'
  # simple object creating
  class Client < SK::SDK::Base;end

  # create objects in custom King namespace
  module; King; end
  %w[Client Invoice Product LineItem].each do |model|
    eval "class King::#{model} < SK::SDK::Base;end"
  end

  # add your connection settings
  SK::SDK::Base.set_connection {:site => 'https://my_sub.salesking.eu/api',
                                :user => 'my-users@login-email.com',
                                :password => 'password' })
  #OR Use an oAuth access token
  #SK::SDK::Base.set_connection {:site => 'https://my_sub.salesking.eu/api',
  #                              :token => 'someAccessToken'})
  
  # use it
  client = Client.new(:last_name=> 'Meister')
  client.first_name = "Bau"
  client.save
  credit_note = King::CreditNote.new

You MUST provide the full url using the right protocol when you set the
connection and remember our production system only supports HTTPS:
  http/https + SUBDomain + salesking url + /api

The old ArCli.make method to create the classes, still exists but is deprecated:

  require "sk_sdk/ar_cli"
  SK::SDK::ArCli.make(:client)

  # OR create a class within a namespace
  module; King; end
  SK::SDK::ArCli.make(:credit_note, King)


Want to know more about REST style webservices?
* http://en.wikipedia.org/wiki/Representational_State_Transfer
* http://www.google.com/search?q=REST+site%3Awww.infoq.com

=== Authentification & Safety

Authentification can be done with oAuth2 but we still support HTTP BasicAuth 
using your SalesKing login email and password. oAuth examples(support) will
follow.

For a production environment be advised to create a user, per api client, and
restrict his rights with our build in role-system!


=== API Tutorial and Tools

Since browsers do not support PUT/DELETE methods you can use CURL, a linux
command-line http client, for testing. And of course any http library supporting
http-basic-auth can be used.

* Getting started: http://dev.blog.salesking.eu/api/
* ActiveResource readme: https://github.com/rails/rails/tree/master/activeresource
* Chrome cRest extension https://chrome.google.com/extensions/detail/baedhhmoaooldchehjhlpppaieoglhml
* Poster FF-Plugin - make HTTP request https://addons.mozilla.org/en-US/firefox/addon/2691/  (you must be logged into SalesKing)
* JSONView  FF-Plugin - view json in firefox https://addons.mozilla.org/de/firefox/addon/10869/
* JSONovich FF-Plugin -  https://addons.mozilla.org/de/firefox/addon/10122/

== Tests / Specs

Take a look into spec/resources to see a how-to

  rake coverage

Copyright (c) 2011 Georg Leciejewski, released under the MIT license
